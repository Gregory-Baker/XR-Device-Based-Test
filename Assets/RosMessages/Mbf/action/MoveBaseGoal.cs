//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Mbf
{
    [Serializable]
    public class MoveBaseGoal : Message
    {
        public const string k_RosMessageName = "mbf_msgs/MoveBase";
        public override string RosMessageName => k_RosMessageName;

        //  Extension of move_base_msgs/MoveBase action, with more detailed result
        //  and feedback and the possibility to specify lists of applicable plugins
        public Geometry.PoseStampedMsg target_pose;
        //  Controller to use; defaults to the first one specified on "controllers" parameter
        public string controller;
        //  Planner to use; defaults to the first one specified on "planners" parameter
        public string planner;
        //  Recovery behaviors to try on case of failure; defaults to the "recovery_behaviors" parameter value
        public string[] recovery_behaviors;

        public MoveBaseGoal()
        {
            this.target_pose = new Geometry.PoseStampedMsg();
            this.controller = "";
            this.planner = "";
            this.recovery_behaviors = new string[0];
        }

        public MoveBaseGoal(Geometry.PoseStampedMsg target_pose, string controller, string planner, string[] recovery_behaviors)
        {
            this.target_pose = target_pose;
            this.controller = controller;
            this.planner = planner;
            this.recovery_behaviors = recovery_behaviors;
        }

        public static MoveBaseGoal Deserialize(MessageDeserializer deserializer) => new MoveBaseGoal(deserializer);

        private MoveBaseGoal(MessageDeserializer deserializer)
        {
            this.target_pose = Geometry.PoseStampedMsg.Deserialize(deserializer);
            deserializer.Read(out this.controller);
            deserializer.Read(out this.planner);
            deserializer.Read(out this.recovery_behaviors, deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.target_pose);
            serializer.Write(this.controller);
            serializer.Write(this.planner);
            serializer.WriteLength(this.recovery_behaviors);
            serializer.Write(this.recovery_behaviors);
        }

        public override string ToString()
        {
            return "MoveBaseGoal: " +
            "\ntarget_pose: " + target_pose.ToString() +
            "\ncontroller: " + controller.ToString() +
            "\nplanner: " + planner.ToString() +
            "\nrecovery_behaviors: " + System.String.Join(", ", recovery_behaviors.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize, MessageSubtopic.Goal);
        }
    }
}
